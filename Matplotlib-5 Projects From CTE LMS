Project 1: Visualizing Sales Data Over Time

Objective: Create a line plot to visualize sales trends over time.
This projects helps analyze how sales change over a certain period, whether daily, monthly, or yearly, using line plots.

Steps:
1. Import the sales data.
2. Use a time-series format for the x-axis and the sales amount for the y-axis.
3. Create a simple line plot and customize it by adding lables and titles.
4. Identify key trends such as peaks and throughs.

Outcome: A line plot visualizing how sales changes over a period, aloowing the business to identify the months with the
highest amd lowest sales.

#Import necessary libraries
import matplotlib.pyplot as plt
import pandas as pd

# Sample data: Mpnthly sales data
data = {'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
        'Sales': [2500, 3000, 4000, 3500, 5000, 4500]
}

df = pd.DataFrame(data)

# Plotting sales over time
plt.plot(df['Month'], df['Sales'], marker='o', linestyle='-', color='b')
plt.xlabel ('Month')
plt.ylabel ('Sales ($)')
plt.title ('Monthly Sales Over Time')
plt.grid (True)
plt.show()
************************************************************************************
Project 2: Customer Segmentation Analysis Using Scatter Plots

Objective: Analyze customer segmentation using scatter plots to identify relationships between spending habits and income.
    
This project is great for understanding how income levels influence spending behaviour, helping business target specific customer segment.

Steps:
1. Import customer data (spending and income).
2. Create a scatter plot where the x-axis represents income and y-axis represents spending.
3. Customize the plot by coloring the points based on income brackets or categories.
4. Analyze any cluster or correlations.

Outcome: A scatter plot displaying the relationship between income and spending, identifying potential customer
segments based on their purchasing behavior.  

#Import necessary libraries
import matplotlib.pyplot as plt

# Sample data: Customer income and spending
income = [30, 40, 50, 60, 70, 80, 90, 100]
spending = [200, 250, 300, 350, 400, 450, 500, 550]

plt.scatter (income, spending, color='purple', marker='x')
plt.xlabel ('Income ($k)')
plt.ylabel ('Spending ($)')
plt. title ('Customer Segmentation: Income vs Spending')
plt.grid (True)
plt.show ()
***************************************************************************************************************************
Project 3: Market Share Visualization with Pie Charts

Objective: Use pie chart to visualize the market share of different companies in an industry.
This project demonstrates how to use pie charts for visualizing proportions and how different companies share the market.

Steps:
1. Collect data for the market share of each company.
2. Create a pie chart with labels represnting the company names and values for the market share.
3. Customize the pie chart by adding colors, exploding certain slices, and showing percentages.

Outcome: A pie chart showing the market share of different companies in a given industry, allowing business to
understand competition in the market.

#Import necessary libraries
import matplotlib.pyplot as plt

# Sample data: Market share of different companies
companies = ['Company A', 'Company B', 'Company C', 'Company D']
market_share = [25, 35, 20, 20]

plt.pie (market_share, labels=companies, autopct='%1.1f%%', explode=(0, 0.1, 0, 0))
plt.title ('Market Share of Companies')
plt.show()
*****************************************************************************************************************
Project 4: Weather Data Analysis Using Histograms

Objective: Analyze temperature data using histohrams to understand the distribution of temperatures over a year.
This project is useful for understanding the range and frequency of temperatures throughout a year, helping meteorologists and researches.

Steps:
1. Collect temperature data over a year.
2. Use a histogram to visualize the frequency of temperature ranges.
3. Customize the histogram by adjusting the bin size, colors, and adding a cumulative option.

Outcome: A histogram showing the distribution of temperatures over a year, providing insights into common temperature ranges and weather patterns.

#Import necessary libraries
import matplotlib.pyplot as plt

# Sample data: Temperature distribution over a year
temperatures = [22, 24, 20, 19, 21, 23, 26, 28, 30, 25, 22, 24, 29, 31, 27, 26, 25, 22]

plt.hist (temperatures, bins=5, edgecolor='black', color='orange')
plt.xlabel ('Temperature (Â°C)')
plt.ylabel ('Frequency')
plt.title ('Temperature Distribution Over a Year')
plt.show()
***************************************************************************************************************************************************
Project 5: 3D Surface Plot for Terrain Visualization

Objective: Visualize a geographical terrain using 3D surface plot.
This project is useful for understanding the topography of a landscape, such as elevation or terrain features.

Steps:
1. Collect or generate data represnting terrain elevation.
2. Create a 3D surface plot to visualize the changes in elevation.
3. Customize the 3D plot with color mapping to show different elevation levels.

Outcome: A 3D surface plot representing terrain elevation, aloowing users to visualize geographical features in three dimensions.

#Import necessary libraries
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure ()
ax = fig.add_subplot (111, projection='3d')

x = np.linspace (-5, 5, 100)
y = np.linspace (-5, 5, 100)
X, Y = np.meshgrid (x, y)
Z = np.sin (np.sqrt (X**2 + Y**2))

ax.plot_surface (X, Y, Z, cmap='terrain')
plt.title ('3D Terrain Visualization')
plt.show()
***********************************************************************************************************************************************
