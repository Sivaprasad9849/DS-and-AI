1. Monthly Revenue Breakdown  
- Objective: Compare monthly revenues of a business across departments.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Generate sample data
# Let's assume we have 12 months and 5 departments
departments = ['Sales', 'Marketing', 'HR', 'Finance', 'Operations']
months = pd.date_range(start='2024-01-01', end='2024-12-31', freq='M').strftime('%B')

# Random revenue values for each department each month
np.random.seed(42)  # For reproducibility
revenues = np.random.randint(10000, 50000, size=(12, 5))  # Random revenues between 10,000 and 50,000

# Step 2: Create a DataFrame
df = pd.DataFrame(revenues, columns=departments, index=months)

# Step 3: Plot the monthly revenue breakdown using a bar plot
df.plot(kind='bar', figsize=(12, 6))

# Step 4: Customize the plot
plt.title('Monthly Revenue Breakdown by Department (2024)')
plt.xlabel('Month')
plt.ylabel('Revenue ($)')
plt.xticks(rotation=45)  # Rotate month names to fit better
plt.legend(title='Departments', bbox_to_anchor=(1.05, 1), loc='upper left')  # Legend outside the plot
plt.tight_layout()  # Adjust layout to make room for the legend

# Step 5: Show the plot
plt.show()
**********************************************************************************************************************

2. Student Scores Comparison  
- Objective: Visualize scores of students in different subjects to find strengths and weaknesses.

# Step 1: Import necessary libraries
import matplotlib.pyplot as plt
import pandas as pd

# Step 2: Create Sample data: Student scores in different subjects
data = {
    'Subjects': ['Math', 'Science', 'English', 'History', 'Art'],
    'Akhil': [88, 75, 92, 70, 85],
    'Bharath': [78, 80, 85, 60, 70],
    'Charan': [90, 85, 88, 75, 95],
}

# Convert the data to a DataFrame
df = pd.DataFrame(data)
print(df)
# Step 3: Plot settings
plt.figure(figsize=(10, 6))  # Set the figure size
bar_width = 0.25  # Width of each bar

# Step 4: Get the position of each bar
subjects = df['Subjects']
x = range(len(subjects))

# Step 5: Plot bars for each student
plt.bar(x, df['Akhil'], width=bar_width, label='Akhil')
plt.bar([i + bar_width for i in x], df['Bharath'], width=bar_width, label='Bharath')
plt.bar([i + 2 * bar_width for i in x], df['Charan'], width=bar_width, label='Charan')

# Step 6: Add labels and title
plt.xlabel('Subjects', fontsize=12)
plt.ylabel('Scores', fontsize=12)
plt.title('Comparison of Student Scores Across Subjects', fontsize=14)
plt.xticks([i + bar_width for i in x], subjects)  # Set x-axis labels
plt.legend()  # Show legend
plt.tight_layout()

# Display the plot
plt.show()
************************************************************************************************************
3. Product Popularity  
- Objective: Represent sales of different products in a store for better inventory decisions.

#Step 1: Import necessary libraries
import matplotlib.pyplot as plt
import numpy as np

#Step 2: Create the Data: Product names and their corresponding sales for different stores
data = {
    'Products': ['Laptops', 'Phones', 'Refrigerators', 'Shoes', 'Accessories'],
    'Sales_store_1': [150, 300, 90, 200, 120],  # Sales for Store 1
    'Sales_store_2': [180, 250, 110, 170, 130],  # Sales for Store 2
    'Sales_store_3': [120, 220, 80, 150, 140]  # Sales for Store 3
}
# Create the Dataframe
df = pd.DataFrame(data)
print(df)

#Step 3: Bar width for multiple stores
bar_width = 0.25

#Step 4: X positions for each group of bars (product-wise)
x = np.arange(len(data['Products']))

#Step 5: Plot bars for each store
plt.figure(figsize=(10, 6))  # Set figure size
plt.bar(x - bar_width, data['Sales_store_1'], width=bar_width, label='Store 1', color='skyblue')
plt.bar(x, data['Sales_store_2'], width=bar_width, label='Store 2', color='orange')
plt.bar(x + bar_width, data['Sales_store_3'], width=bar_width, label='Store 3', color='green')

#Step 6: Add title and labels
plt.title('Product Popularity Based on Sales in Different Stores', fontsize=16)
plt.xlabel('Products', fontsize=12)
plt.ylabel('Units Sold', fontsize=12)

# Add product names on x-axis
plt.xticks(x, data['Products'])

#Step 7: Display the sales numbers on top of each bar
for i in range(len(data['Products'])):
    plt.text(i - bar_width, data['Sales_store_1'][i] + 5, str(data['Sales_store_1'][i]), ha='center', fontsize=10)
    plt.text(i, data['Sales_store_2'][i] + 5, str(data['Sales_store_2'][i]), ha='center', fontsize=10)
    plt.text(i + bar_width, data['Sales_store_3'][i] + 5, str(data['Sales_store_3'][i]), ha='center', fontsize=10)

#Step 8: Show legend and plot
plt.legend()
plt.tight_layout()
plt.show()
*******************************************************************************************************************************

4. Election Results Visualization  
- Objective: Show the number of votes each candidate received in a region.

import matplotlib.pyplot as plt
import pandas as pd

# Step 1: Create the data with candidate, region, and votes columns
data = {
    'Candidate': ['Anand', 'Bhargav', 'Ravi', 'Shankar', 'Praveen', 'Shyam'],
    'Region': ['North', 'South', 'North', 'South', 'East', 'West'],
    'Votes': [1500, 1200, 800, 1000, 900, 1100]
}

# Step 2: Create a DataFrame
df = pd.DataFrame(data)
print(df)
# Step 3: Create the bar plot
plt.figure(figsize=(10, 6))

# Step 4: Plot the data
for candidate in df['Candidate'].unique():
    candidate_data = df[df['Candidate'] == candidate]
    plt.bar(candidate_data['Region'], candidate_data['Votes'], label=candidate)

# Step 5: Add title and labels
plt.title('Election Results by Region for Each Candidate', fontsize=16)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Votes', fontsize=12)

# Step 6: Add legend
plt.legend(title='Candidates')

# Step 7: Show the plot
plt.tight_layout()
plt.show()
**************************************************************************************************************

5. Customer Feedback Categories  
- Objective: Display counts of different feedback types (positive, neutral, negative) for a service.

# Step 1: Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt

# Step 2: Define the Data: 20 values for each feedback type
data = {
    "Positive": [8, 9, 10, 7, 9, 8, 10, 9, 7, 8, 10, 9, 9, 8, 7, 8, 10, 9, 8, 7],
    "Neutral": [5, 6, 5, 6, 7, 5, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 5],
    "Negative": [3, 4, 2, 3, 1, 2, 3, 4, 2, 3, 1, 3, 2, 4, 1, 3, 2, 1, 3, 4]
}

# Step 3: Create the Dataframe
df = pd.DataFrame(data)
print(df)

# Step 4: Calculate the sum of feedback counts for each category
feedback_categories = list(data.keys())
feedback_counts = [sum(data[category]) for category in feedback_categories]

# Step 5: Create the bar plot
plt.bar(feedback_categories, feedback_counts, color=['green', 'gray', 'red'])

# Step 6: Add title and labels
plt.title('Customer Feedback Categories')
plt.xlabel('Feedback Type')
plt.ylabel('Total Count')

# Step 7: Display the plot
plt.show()
