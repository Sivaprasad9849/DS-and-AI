# House Price Prediction (Single Feature)
# Predict house prices based on square footage. Train a model using square feet as the input feature and visualize the results.

# 1Ô∏è‚É£ Import Required Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# 2Ô∏è‚É£ Generate Synthetic Dataset for India
np.random.seed(42)  # Ensure reproducibility

# Generate random square footage for houses (500 to 4000 sq. ft.)
house_sizes = np.random.uniform(500, 4000, 100)

# Generate house prices based on square footage with some noise (in INR)
# Assume average price per sq. ft. is ‚Çπ3000, with some random noise
house_prices = 3000 * house_sizes + np.random.normal(0, 50000, 100)  # y = 3000 * X + noise

# Create a DataFrame using Pandas
df = pd.DataFrame({'House_Size_sqft': house_sizes, 'House_Price_INR': house_prices})

# Display the first 5 rows of data
print("üìå Sample Data (First 5 Rows):")
print(df.head())

# 3Ô∏è‚É£ Split Data into Train & Test Sets (80% Train, 20% Test)
X = df[['House_Size_sqft']]  # Feature (Square Footage)
y = df['House_Price_INR']    # Target (House Price in INR)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4Ô∏è‚É£ Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Print model parameters (Intercept & Coefficient)
print(f"\nüìå Model Parameters:")
print(f"Intercept: ‚Çπ{model.intercept_:.2f}")
print(f"Coefficient: ‚Çπ{model.coef_[0]:.2f} per sq. ft.")

# 5Ô∏è‚É£ Make Predictions
y_pred = model.predict(X_test)

# 6Ô∏è‚É£ Evaluate the Model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nüìå Model Evaluation Metrics:")
print(f"Mean Absolute Error (MAE): ‚Çπ{mae:.2f}")
print(f"Mean Squared Error (MSE): ‚Çπ{mse:.2f}")
print(f"R¬≤ Score: {r2:.2f}")

# 7Ô∏è‚É£ Visualization - Scatter Plot & Regression Line
plt.figure(figsize=(8, 5))
plt.scatter(X_test, y_test, color='blue', label='Actual Prices')  # Scatter plot for actual data
plt.plot(np.sort(X_test, axis=0), model.predict(np.sort(X_test, axis=0)), color='red', linewidth=2, label='Regression Line')  # Regression line

plt.xlabel("House Size (Square Feet)")
plt.ylabel("House Price (INR)")
plt.title("House Price Prediction in India using Linear Regression")
plt.legend()
plt.grid(True)
